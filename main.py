import os
import json
import ast
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.utils.exceptions import BotBlocked

API_TOKEN = ''
CHANNEL_LINK = 'https://t.me/+aWJE6yMlzp1jYzQy'
ADMIN_ID =   # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

USERS_FILE = "users.json"

def load_users():
    try:
        with open(USERS_FILE, "r") as f:
            return json.load(f)
    except:
        return []

def save_user(user_id):
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        with open(USERS_FILE, "w") as f:
            json.dump(users, f)

# –í–æ—Ä–æ–Ω–∫–∞
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    save_user(message.from_user.id)
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üöÄ –î–∞–ª—å—à–µ", callback_data="step_2")
    )
    await message.answer(
        "*–ü—Ä–∏–≤–µ—Ç, —è ‚Äî –û—Ç–µ—Ü –†–∞–Ω–¥–æ–º–∞ üé≤*\n*–ë–µ–∑ —Ñ–∞–ª—å—à–∏ –∏ –º–∏—Ñ–æ–≤.*\n\n–ö—Ä—É—Ç–∏–º, –∫–∞–π—Ñ—É–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∑–∏–Ω–æ —Ç–∞–∫–∏–º, –∫–∞–∫–æ–µ –æ–Ω–æ –µ—Å—Ç—å.\n\n–•–æ—á–µ—à—å –∑–∞—Ü–µ–Ω–∏—Ç—å? –ü–æ–≥–Ω–∞–ª–∏ üëá",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@dp.callback_query_handler(lambda c: c.data == 'step_2')
async def step_two(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîç –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏?", callback_data="step_3")
    )
    await bot.send_message(
        callback_query.from_user.id,
        "*–ü—Ä–æ—Å—Ç–æ –∫—Ä—É—á–∫–∞, –ø—Ä–æ—Å—Ç–æ —Å–µ—Å—Å–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ –∫–∞–π—Ñ—É üé∞*\n–ü–æ–∫–∞–∑—ã–≤–∞—é –∫–∞–∫ –µ—Å—Ç—å ‚Äî –≥–¥–µ —Ñ–∞—Ä—Ç, –≥–¥–µ —Å–ª–∏–≤, –≥–¥–µ —Ä–æ—Ñ–ª—ã.\n\n–î–∞–ª—å—à–µ –ø–æ–∫–∞–∂—É, —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç.",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@dp.callback_query_handler(lambda c: c.data == 'step_3')
async def step_three(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üì≤ –í –∫–∞–Ω–∞–ª", callback_data="step_4", url=CHANNEL_LINK)
    )
    await bot.send_message(
        callback_query.from_user.id,
        "*–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç:*\n‚Ä¢ –ù–∞—Å—Ç–æ—è—â–∏–µ —Å–µ—Å—Å–∏–∏\n‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã\n‚Ä¢ –ù–∏–∫–∞–∫–∏—Ö —Å–∫–∞–∑–æ–∫ –ø—Ä–æ ¬´–ø–æ–¥–Ω–∏–º–∏ —Å 200‚ÇΩ¬ª\n\n–í—Å—è –¥–≤–∏–∂—É—Ö–∞ ‚Äî –≤ –∫–∞–Ω–∞–ª–µ.\n\nüîó " + CHANNEL_LINK,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@dp.callback_query_handler(lambda c: c.data == 'step_4')
async def step_four(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="done")
    )
    await bot.send_message(
        callback_query.from_user.id,
        "*–í–æ—Ç –æ–Ω ‚Äî –º–æ–π —É–≥–æ–ª–æ–∫ —Ä–∞–Ω–¥–æ–º–∞ üé≤*\n–°—Ç—Ä–∏–º—ã, —Å–∫—Ä–∏–Ω—ã, –¥–≤–∏–∂, –æ–±—â–µ–Ω–∏–µ ‚Äî –≤—Å—ë –ø–æ –∫–∞–π—Ñ—É –∏ –±–µ–∑ –±—É–ª–ª—à–∏—Ç–∞.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è, –µ—Å–ª–∏ –ø–æ –ø—É—Ç–∏ üëá\n\nüîó " + CHANNEL_LINK,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

@dp.callback_query_handler(lambda c: c.data == 'done')
async def done(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–≤–∏–∂! –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–∏—à–∏ —Å—é–¥–∞.")

# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
@dp.channel_post_handler()
async def repost_to_users(message: types.Message):
    users = load_users()
    for user_id in users:
        try:
            kwargs = {}
            if message.reply_markup:
                kwargs["reply_markup"] = message.reply_markup

            if message.content_type == 'text':
                await bot.send_message(user_id, message.text, **kwargs)
            elif message.content_type == 'photo':
                await bot.send_photo(user_id, message.photo[-1].file_id, caption=message.caption, **kwargs)
            elif message.content_type == 'video':
                await bot.send_video(user_id, message.video.file_id, caption=message.caption, **kwargs)
            elif message.content_type == 'document':
                await bot.send_document(user_id, message.document.file_id, caption=message.caption, **kwargs)
            elif message.content_type == 'audio':
                await bot.send_audio(user_id, message.audio.file_id, caption=message.caption, **kwargs)
            elif message.content_type == 'voice':
                await bot.send_voice(user_id, message.voice.file_id, caption=message.caption, **kwargs)
            elif message.content_type == 'video_note':
                await bot.send_video_note(user_id, message.video_note.file_id, **kwargs)
            elif message.content_type == 'animation':
                await bot.send_animation(user_id, message.animation.file_id, caption=message.caption, **kwargs)
            else:
                await bot.send_message(user_id, "üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ!", **kwargs)
        except BotBlocked:
            continue

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
admin_kb = ReplyKeyboardMarkup(resize_keyboard=True)
admin_kb.add(
    KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    KeyboardButton("üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
)
admin_kb.add(
    KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
)

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "/admin")
async def admin_panel(m: types.Message):
    await m.reply("üîê *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞*", parse_mode='Markdown', reply_markup=admin_kb)

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(m: types.Message):
    users = load_users()
    await m.reply(f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ:* {len(users)}", parse_mode='Markdown')

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "üìÅ –í—ã–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def dump_users(m: types.Message):
    await m.reply_document(types.InputFile(USERS_FILE), caption="üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (JSON)")

# –†–∞—Å—Å—ã–ª–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
broadcast_media_state = {}

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def ask_broadcast(m: types.Message):
    broadcast_media_state[m.from_user.id] = {}
    await m.reply("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å –º–µ–¥–∏–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏):")

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text.startswith("!–∫–Ω–æ–ø–∫–∏"))
async def custom_buttons_input(m: types.Message):
    try:
        btn_data = m.text.replace("!–∫–Ω–æ–ø–∫–∏", "").strip()
        buttons = ast.literal_eval(btn_data)

        kb = InlineKeyboardMarkup()
        for btn in buttons:
            kb.add(InlineKeyboardButton(text=btn["text"], url=btn["url"]))

        broadcast_media_state[m.from_user.id] = {"custom_markup": kb}
        await m.reply("‚úÖ –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞.")
    except Exception:
        await m.reply(
            '‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ. –ü—Ä–∏–º–µ—Ä:\n`!–∫–Ω–æ–ø–∫–∏ [{\"text\": \"–ü–µ—Ä–µ–π—Ç–∏\", \"url\": \"https://t.me/yourlink\"}]`',
            parse_mode="Markdown"
        )

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID and m.text == "!–ª–æ–≥")
async def send_broadcast_log(m: types.Message):
    if os.path.exists("broadcast_log.txt"):
        await m.reply_document(types.InputFile("broadcast_log.txt"), caption="üìú –õ–æ–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
    else:
        await m.reply("‚ö†Ô∏è –õ–æ–≥ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")

@dp.message_handler(content_types=types.ContentType.ANY)
async def handle_broadcast_content(m: types.Message):
    if m.from_user.id != ADMIN_ID or m.from_user.id not in broadcast_media_state:
        return

    users = load_users()
    count = 0
    text = m.caption if m.caption else m.text
    markup = broadcast_media_state[m.from_user.id].get("custom_markup", m.reply_markup)

    for uid in users:
        try:
            if m.content_type == 'photo':
                await bot.send_photo(uid, m.photo[-1].file_id, caption=text, reply_markup=markup, parse_mode='Markdown')
            elif m.content_type == 'video':
                await bot.send_video(uid, m.video.file_id, caption=text, reply_markup=markup, parse_mode='Markdown')
            elif m.content_type == 'animation':
                await bot.send_animation(uid, m.animation.file_id, caption=text, reply_markup=markup, parse_mode='Markdown')
            elif m.content_type == 'document':
                await bot.send_document(uid, m.document.file_id, caption=text, reply_markup=markup, parse_mode='Markdown')
            elif m.content_type == 'voice':
                await bot.send_voice(uid, m.voice.file_id, caption=text, reply_markup=markup, parse_mode='Markdown')
            elif m.content_type == 'text':
                await bot.send_message(uid, text, reply_markup=markup, parse_mode='Markdown')
            else:
                await bot.send_message(uid, "üì¢ –ù–æ–≤—ã–π –ø–æ—Å—Ç!", reply_markup=markup)

            with open("broadcast_log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(f"{uid}\n")

            count += 1
        except:
            continue

    del broadcast_media_state[m.from_user.id]
    await m.reply(f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}", parse_mode='Markdown')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
